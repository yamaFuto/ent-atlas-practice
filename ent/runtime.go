// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ent-atlas-test/ent/book"
	"ent-atlas-test/ent/schema"
	"ent-atlas-test/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	bookFields := schema.Book{}.Fields()
	_ = bookFields
	// bookDescTitle is the schema descriptor for title field.
	bookDescTitle := bookFields[0].Descriptor()
	// book.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	book.TitleValidator = func() func(string) error {
		validators := bookDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// bookDescBody is the schema descriptor for body field.
	bookDescBody := bookFields[1].Descriptor()
	// book.BodyValidator is a validator for the "body" field. It is called by the builders before save.
	book.BodyValidator = bookDescBody.Validators[0].(func(string) error)
	// bookDescPrice is the schema descriptor for price field.
	bookDescPrice := bookFields[2].Descriptor()
	// book.PriceValidator is a validator for the "price" field. It is called by the builders before save.
	book.PriceValidator = bookDescPrice.Validators[0].(func(int) error)
	// bookDescThoughts is the schema descriptor for thoughts field.
	bookDescThoughts := bookFields[3].Descriptor()
	// book.ThoughtsValidator is a validator for the "thoughts" field. It is called by the builders before save.
	book.ThoughtsValidator = bookDescThoughts.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescDescription is the schema descriptor for description field.
	userDescDescription := userFields[1].Descriptor()
	// user.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	user.DescriptionValidator = userDescDescription.Validators[0].(func(string) error)
	// userDescAge is the schema descriptor for age field.
	userDescAge := userFields[2].Descriptor()
	// user.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	user.AgeValidator = userDescAge.Validators[0].(func(int64) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[3].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
