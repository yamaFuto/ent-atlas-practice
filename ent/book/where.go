// Code generated by ent, DO NOT EDIT.

package book

import (
	"ent-atlas-test/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldTitle, v))
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldBody, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPrice, v))
}

// Thoughts applies equality check predicate on the "thoughts" field. It's identical to ThoughtsEQ.
func Thoughts(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldThoughts, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldTitle, v))
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldBody, v))
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldBody, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldPrice, v))
}

// ThoughtsEQ applies the EQ predicate on the "thoughts" field.
func ThoughtsEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldThoughts, v))
}

// ThoughtsNEQ applies the NEQ predicate on the "thoughts" field.
func ThoughtsNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldThoughts, v))
}

// ThoughtsIn applies the In predicate on the "thoughts" field.
func ThoughtsIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldThoughts, vs...))
}

// ThoughtsNotIn applies the NotIn predicate on the "thoughts" field.
func ThoughtsNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldThoughts, vs...))
}

// ThoughtsGT applies the GT predicate on the "thoughts" field.
func ThoughtsGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldThoughts, v))
}

// ThoughtsGTE applies the GTE predicate on the "thoughts" field.
func ThoughtsGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldThoughts, v))
}

// ThoughtsLT applies the LT predicate on the "thoughts" field.
func ThoughtsLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldThoughts, v))
}

// ThoughtsLTE applies the LTE predicate on the "thoughts" field.
func ThoughtsLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldThoughts, v))
}

// ThoughtsContains applies the Contains predicate on the "thoughts" field.
func ThoughtsContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldThoughts, v))
}

// ThoughtsHasPrefix applies the HasPrefix predicate on the "thoughts" field.
func ThoughtsHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldThoughts, v))
}

// ThoughtsHasSuffix applies the HasSuffix predicate on the "thoughts" field.
func ThoughtsHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldThoughts, v))
}

// ThoughtsEqualFold applies the EqualFold predicate on the "thoughts" field.
func ThoughtsEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldThoughts, v))
}

// ThoughtsContainsFold applies the ContainsFold predicate on the "thoughts" field.
func ThoughtsContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldThoughts, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Book) predicate.Book {
	return predicate.Book(sql.NotPredicates(p))
}
